
Stopwatch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000006b6  0000074a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080006a  0080006a  00000754  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000754  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000784  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  000007c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011d1  00000000  00000000  000008a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007e8  00000000  00000000  00001a79  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a0c  00000000  00000000  00002261  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00002c70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000061a  00000000  00000000  00002dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000be1  00000000  00000000  000033ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003fcb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 eb       	ldi	r30, 0xB6	; 182
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 36       	cpi	r26, 0x6B	; 107
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 5b 00 	call	0xb6	; 0xb6 <main>
  8a:	0c 94 59 03 	jmp	0x6b2	; 0x6b2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <H7SEG_u8Init>:
 *			     (0) means no error,(1) means Undefined PORT Argument
 */
u8 H7SEG_u8Init(u8 Copy_u8Reg)
{
	/*initialize 7-segment led string at desired port and return error value*/
	return HLED_u8InitLedString(Copy_u8Reg);
  92:	0e 94 54 00 	call	0xa8	; 0xa8 <HLED_u8InitLedString>

}/*end of H7SEG_u8Init()*/
  96:	08 95       	ret

00000098 <H7SEG_u8DisplayNumber>:
{
	/*Disblay Number check condition*/
	if ( (Copy_u8DisblayNumber >= 0) || (Copy_u8DisblayNumber<10) )
	{
		/*Disblay number from seven segment array and return error value*/
		return HLED_u8LedStringOnOff(Copy_u8Reg,H7SEG_u8SevenSegArray[Copy_u8DisblayNumber]);
  98:	e6 2f       	mov	r30, r22
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	e0 5a       	subi	r30, 0xA0	; 160
  9e:	ff 4f       	sbci	r31, 0xFF	; 255
  a0:	60 81       	ld	r22, Z
  a2:	0e 94 58 00 	call	0xb0	; 0xb0 <HLED_u8LedStringOnOff>
		/*Disblay Number out of range error*/
		return 2;  
		
	}/*End of Disblay Number check condition*/

  a6:	08 95       	ret

000000a8 <HLED_u8InitLedString>:
u8 HLED_u8LedOnOff(u8 Copy_u8Reg,u8 Copy_u8Bit,u8 Copy_u8State)
{
	/*write led value on desired bit and return error value*/
	return MDIO_u8WriteBit(Copy_u8Reg,Copy_u8Bit,Copy_u8State);

}/*end of HLED_u8LedOnOff*/
  a8:	61 e0       	ldi	r22, 0x01	; 1
  aa:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <MDIO_u8SetDirectionReg>
  ae:	08 95       	ret

000000b0 <HLED_u8LedStringOnOff>:
 *			     (0) means no error,(1) means Undefined PORT Argument
 */
u8 HLED_u8LedStringOnOff(u8 Copy_u8Reg,u8 Copy_u8Value)
{
	/*write led values on Register and return error value*/
	return MDIO_u8WriteReg(Copy_u8Reg,Copy_u8Value);
  b0:	0e 94 00 02 	call	0x400	; 0x400 <MDIO_u8WriteReg>

  b4:	08 95       	ret

000000b6 <main>:
	/*==========================================
	 * Initialization
	 *==========================================*/
	
	/*Initialize  7-Segment value at PORTA*/
	H7SEG_u8Init(MDIO_PORTA);
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	0e 94 49 00 	call	0x92	; 0x92 <H7SEG_u8Init>
	
	/*Initialize Buttons*/
	/*=============================================================================*/
	/*Start button*/
	MDIO_u8SetDirectionBit(MDIO_PORTC,MDIO_PC0,MDIO_INPUT);
  bc:	40 e0       	ldi	r20, 0x00	; 0
  be:	60 e0       	ldi	r22, 0x00	; 0
  c0:	83 e0       	ldi	r24, 0x03	; 3
  c2:	0e 94 78 01 	call	0x2f0	; 0x2f0 <MDIO_u8SetDirectionBit>
	/*enable pull up resistor*/
	MDIO_u8ConfigPullupBit(MDIO_PORTC,MDIO_PC0,MDIO_EN_PULL_UP_RES);
  c6:	41 e0       	ldi	r20, 0x01	; 1
  c8:	60 e0       	ldi	r22, 0x00	; 0
  ca:	83 e0       	ldi	r24, 0x03	; 3
  cc:	0e 94 d5 02 	call	0x5aa	; 0x5aa <MDIO_u8ConfigPullupBit>
	
	/*Stop button*/
	MDIO_u8SetDirectionBit(MDIO_PORTC,MDIO_PC1,MDIO_INPUT);
  d0:	40 e0       	ldi	r20, 0x00	; 0
  d2:	61 e0       	ldi	r22, 0x01	; 1
  d4:	83 e0       	ldi	r24, 0x03	; 3
  d6:	0e 94 78 01 	call	0x2f0	; 0x2f0 <MDIO_u8SetDirectionBit>
	/*enable pull up resistor*/
	MDIO_u8ConfigPullupBit(MDIO_PORTC,MDIO_PC1,MDIO_EN_PULL_UP_RES);
  da:	41 e0       	ldi	r20, 0x01	; 1
  dc:	61 e0       	ldi	r22, 0x01	; 1
  de:	83 e0       	ldi	r24, 0x03	; 3
  e0:	0e 94 d5 02 	call	0x5aa	; 0x5aa <MDIO_u8ConfigPullupBit>
	
	/*Reset button*/
	MDIO_u8SetDirectionBit(MDIO_PORTC,MDIO_PC2,MDIO_INPUT);
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	62 e0       	ldi	r22, 0x02	; 2
  e8:	83 e0       	ldi	r24, 0x03	; 3
  ea:	0e 94 78 01 	call	0x2f0	; 0x2f0 <MDIO_u8SetDirectionBit>
	/*enable pull up resistor*/
	MDIO_u8ConfigPullupBit(MDIO_PORTC,MDIO_PC2,MDIO_EN_PULL_UP_RES);
  ee:	41 e0       	ldi	r20, 0x01	; 1
  f0:	62 e0       	ldi	r22, 0x02	; 2
  f2:	83 e0       	ldi	r24, 0x03	; 3
  f4:	0e 94 d5 02 	call	0x5aa	; 0x5aa <MDIO_u8ConfigPullupBit>
	
	/*initialize enable pins these pins will be used to choose between 7-segments*/
	/*=============================================================================*/
	/*set Seconds-Units 7-segment's enable at PB7 and set it as Output*/
	MDIO_u8SetDirectionBit(MDIO_PORTB,MDIO_PB7,MDIO_OUTPUT);
  f8:	41 e0       	ldi	r20, 0x01	; 1
  fa:	67 e0       	ldi	r22, 0x07	; 7
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	0e 94 78 01 	call	0x2f0	; 0x2f0 <MDIO_u8SetDirectionBit>
	/*set Seconds-Tens 7-segment's enable at PB6 and set it as Output*/
	MDIO_u8SetDirectionBit(MDIO_PORTB,MDIO_PB6,MDIO_OUTPUT);
 102:	41 e0       	ldi	r20, 0x01	; 1
 104:	66 e0       	ldi	r22, 0x06	; 6
 106:	82 e0       	ldi	r24, 0x02	; 2
 108:	0e 94 78 01 	call	0x2f0	; 0x2f0 <MDIO_u8SetDirectionBit>
	/*set Minutes-Units 7-segment's enable at PB5 and set it as Output*/
	MDIO_u8SetDirectionBit(MDIO_PORTB,MDIO_PB5,MDIO_OUTPUT);
 10c:	41 e0       	ldi	r20, 0x01	; 1
 10e:	65 e0       	ldi	r22, 0x05	; 5
 110:	82 e0       	ldi	r24, 0x02	; 2
 112:	0e 94 78 01 	call	0x2f0	; 0x2f0 <MDIO_u8SetDirectionBit>
	/*set Minutes-Tens 7-segment's enable at PB4 and set it as Output*/
	MDIO_u8SetDirectionBit(MDIO_PORTB,MDIO_PB4,MDIO_OUTPUT);
 116:	41 e0       	ldi	r20, 0x01	; 1
 118:	64 e0       	ldi	r22, 0x04	; 4
 11a:	82 e0       	ldi	r24, 0x02	; 2
 11c:	0e 94 78 01 	call	0x2f0	; 0x2f0 <MDIO_u8SetDirectionBit>
	
	/*initialize all 4 7-segments off*/
	/*=============================================================================*/
	/*disable Seconds' Units 7-segment*/
	MDIO_u8WriteBit(MDIO_PORTB,MDIO_PB7,MDIO_LOW);
 120:	40 e0       	ldi	r20, 0x00	; 0
 122:	67 e0       	ldi	r22, 0x07	; 7
 124:	82 e0       	ldi	r24, 0x02	; 2
 126:	0e 94 1c 02 	call	0x438	; 0x438 <MDIO_u8WriteBit>
	/*disable Seconds' Tens 7-segment*/
	MDIO_u8WriteBit(MDIO_PORTB,MDIO_PB6,MDIO_LOW);
 12a:	40 e0       	ldi	r20, 0x00	; 0
 12c:	66 e0       	ldi	r22, 0x06	; 6
 12e:	82 e0       	ldi	r24, 0x02	; 2
 130:	0e 94 1c 02 	call	0x438	; 0x438 <MDIO_u8WriteBit>
	/*disable Minutes' Units 7-segment*/
	MDIO_u8WriteBit(MDIO_PORTB,MDIO_PB5,MDIO_LOW);
 134:	40 e0       	ldi	r20, 0x00	; 0
 136:	65 e0       	ldi	r22, 0x05	; 5
 138:	82 e0       	ldi	r24, 0x02	; 2
 13a:	0e 94 1c 02 	call	0x438	; 0x438 <MDIO_u8WriteBit>
	/*disable Minutes' Tens 7-segment*/
	MDIO_u8WriteBit(MDIO_PORTB,MDIO_PB4,MDIO_LOW);
 13e:	40 e0       	ldi	r20, 0x00	; 0
 140:	64 e0       	ldi	r22, 0x04	; 4
 142:	82 e0       	ldi	r24, 0x02	; 2
 144:	0e 94 1c 02 	call	0x438	; 0x438 <MDIO_u8WriteBit>
	/*Seconds tens value*/
	u8 Local_u8SecondsTensCount  = 0;
	/*Minutes units value*/
	u8 Local_u8MinutesUnitsCount = 0;
	/*Minutes tens value*/
	u8 Local_u8MinutesTensCount  = 0;
 148:	f1 2c       	mov	r15, r1
	/*Seconds units value*/
	u8 Local_u8SecondsUnitsCount = 0;
	/*Seconds tens value*/
	u8 Local_u8SecondsTensCount  = 0;
	/*Minutes units value*/
	u8 Local_u8MinutesUnitsCount = 0;
 14a:	10 e0       	ldi	r17, 0x00	; 0
	 * Variables
	 *==========================================*/
	/*Seconds units value*/
	u8 Local_u8SecondsUnitsCount = 0;
	/*Seconds tens value*/
	u8 Local_u8SecondsTensCount  = 0;
 14c:	00 e0       	ldi	r16, 0x00	; 0
	
	/*==========================================
	 * Variables
	 *==========================================*/
	/*Seconds units value*/
	u8 Local_u8SecondsUnitsCount = 0;
 14e:	d0 e0       	ldi	r29, 0x00	; 0
 150:	cd e7       	ldi	r28, 0x7D	; 125
		
		/*loop to display all 7 segments with a delay Dependant on number of iteration*/
		for (u8 i = 0 ; i < DELAY ; i++)
		{
			
			if ( PRESSED == MDIO_u8ReadBit(MDIO_PORTC,MDIO_PC0) )
 152:	60 e0       	ldi	r22, 0x00	; 0
 154:	83 e0       	ldi	r24, 0x03	; 3
 156:	0e 94 a0 02 	call	0x540	; 0x540 <MDIO_u8ReadBit>
 15a:	81 11       	cpse	r24, r1
 15c:	04 c0       	rjmp	.+8      	; 0x166 <main+0xb0>
			{
				/* Start Button has been pressed
				 * Update button status to start*/
				APP_u8StopStartButtonState = START;
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
 164:	15 c0       	rjmp	.+42     	; 0x190 <main+0xda>
	
			}
			else if ( PRESSED == MDIO_u8ReadBit(MDIO_PORTC,MDIO_PC1) )
 166:	61 e0       	ldi	r22, 0x01	; 1
 168:	83 e0       	ldi	r24, 0x03	; 3
 16a:	0e 94 a0 02 	call	0x540	; 0x540 <MDIO_u8ReadBit>
 16e:	81 11       	cpse	r24, r1
 170:	03 c0       	rjmp	.+6      	; 0x178 <main+0xc2>
			{
				/* Stop Button has been pressed
				 * toggle button status*/
				APP_u8StopStartButtonState = STOP;
 172:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end>
 176:	0c c0       	rjmp	.+24     	; 0x190 <main+0xda>
				//break;
			}
			else if ( PRESSED == MDIO_u8ReadBit(MDIO_PORTC,MDIO_PC2) )
 178:	62 e0       	ldi	r22, 0x02	; 2
 17a:	83 e0       	ldi	r24, 0x03	; 3
 17c:	0e 94 a0 02 	call	0x540	; 0x540 <MDIO_u8ReadBit>
 180:	81 11       	cpse	r24, r1
 182:	06 c0       	rjmp	.+12     	; 0x190 <main+0xda>
			{
				/*Reset Button has been pressed*/
				/*Stop count*/
				APP_u8StopStartButtonState   = STOP;
 184:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end>
				/*Seconds tens value*/
				Local_u8SecondsTensCount  = 0;
				/*Minutes units value*/
				Local_u8MinutesUnitsCount = 0;
				/*Minutes tens value*/
				Local_u8MinutesTensCount  = 0;
 188:	f1 2c       	mov	r15, r1
				 * Seconds units value*/
				Local_u8SecondsUnitsCount = 0;
				/*Seconds tens value*/
				Local_u8SecondsTensCount  = 0;
				/*Minutes units value*/
				Local_u8MinutesUnitsCount = 0;
 18a:	10 e0       	ldi	r17, 0x00	; 0
				APP_u8StopStartButtonState   = STOP;
				/* Rest counter Digits
				 * Seconds units value*/
				Local_u8SecondsUnitsCount = 0;
				/*Seconds tens value*/
				Local_u8SecondsTensCount  = 0;
 18c:	00 e0       	ldi	r16, 0x00	; 0
				/*Reset Button has been pressed*/
				/*Stop count*/
				APP_u8StopStartButtonState   = STOP;
				/* Rest counter Digits
				 * Seconds units value*/
				Local_u8SecondsUnitsCount = 0;
 18e:	d0 e0       	ldi	r29, 0x00	; 0
			
			/*================================================================
			 *Display Seconds-Units 7-segment
			 *================================================================*/
			/*enable Seconds-Units 7-segment*/
			MDIO_u8WriteBit(MDIO_PORTB,MDIO_PB7,MDIO_HIGH);
 190:	41 e0       	ldi	r20, 0x01	; 1
 192:	67 e0       	ldi	r22, 0x07	; 7
 194:	82 e0       	ldi	r24, 0x02	; 2
 196:	0e 94 1c 02 	call	0x438	; 0x438 <MDIO_u8WriteBit>
			/*disable Seconds-Tens 7-segment*/
			MDIO_u8WriteBit(MDIO_PORTB,MDIO_PB6,MDIO_LOW);
 19a:	40 e0       	ldi	r20, 0x00	; 0
 19c:	66 e0       	ldi	r22, 0x06	; 6
 19e:	82 e0       	ldi	r24, 0x02	; 2
 1a0:	0e 94 1c 02 	call	0x438	; 0x438 <MDIO_u8WriteBit>
			/*disable Minutes-Units 7-segment*/
			MDIO_u8WriteBit(MDIO_PORTB,MDIO_PB5,MDIO_LOW);
 1a4:	40 e0       	ldi	r20, 0x00	; 0
 1a6:	65 e0       	ldi	r22, 0x05	; 5
 1a8:	82 e0       	ldi	r24, 0x02	; 2
 1aa:	0e 94 1c 02 	call	0x438	; 0x438 <MDIO_u8WriteBit>
			/*disable Minutes-Tens 7-segment*/
			MDIO_u8WriteBit(MDIO_PORTB,MDIO_PB4,MDIO_LOW);
 1ae:	40 e0       	ldi	r20, 0x00	; 0
 1b0:	64 e0       	ldi	r22, 0x04	; 4
 1b2:	82 e0       	ldi	r24, 0x02	; 2
 1b4:	0e 94 1c 02 	call	0x438	; 0x438 <MDIO_u8WriteBit>
			/*set Seconds-Units 7-segment value*/
			H7SEG_u8DisplayNumber(MDIO_PORTA,Local_u8SecondsUnitsCount);
 1b8:	6d 2f       	mov	r22, r29
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	0e 94 4c 00 	call	0x98	; 0x98 <H7SEG_u8DisplayNumber>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c0:	8f e9       	ldi	r24, 0x9F	; 159
 1c2:	9f e0       	ldi	r25, 0x0F	; 15
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <main+0x10e>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <main+0x114>
 1ca:	00 00       	nop
			
			/*================================================================
			 *Display Seconds-Tens 7-segment
			 *================================================================*/
			/*disable Seconds-Units 7-segment*/
			MDIO_u8WriteBit(MDIO_PORTB,MDIO_PB7,MDIO_LOW);
 1cc:	40 e0       	ldi	r20, 0x00	; 0
 1ce:	67 e0       	ldi	r22, 0x07	; 7
 1d0:	82 e0       	ldi	r24, 0x02	; 2
 1d2:	0e 94 1c 02 	call	0x438	; 0x438 <MDIO_u8WriteBit>
			/*enable Seconds' Tens 7-segment*/
			MDIO_u8WriteBit(MDIO_PORTB,MDIO_PB6,MDIO_HIGH);
 1d6:	41 e0       	ldi	r20, 0x01	; 1
 1d8:	66 e0       	ldi	r22, 0x06	; 6
 1da:	82 e0       	ldi	r24, 0x02	; 2
 1dc:	0e 94 1c 02 	call	0x438	; 0x438 <MDIO_u8WriteBit>
			/*disable Minutes-Units 7-segment*/
			MDIO_u8WriteBit(MDIO_PORTB,MDIO_PB5,MDIO_LOW);
 1e0:	40 e0       	ldi	r20, 0x00	; 0
 1e2:	65 e0       	ldi	r22, 0x05	; 5
 1e4:	82 e0       	ldi	r24, 0x02	; 2
 1e6:	0e 94 1c 02 	call	0x438	; 0x438 <MDIO_u8WriteBit>
			/*disable Minutes-Tens 7-segment*/
			MDIO_u8WriteBit(MDIO_PORTB,MDIO_PB4,MDIO_LOW);
 1ea:	40 e0       	ldi	r20, 0x00	; 0
 1ec:	64 e0       	ldi	r22, 0x04	; 4
 1ee:	82 e0       	ldi	r24, 0x02	; 2
 1f0:	0e 94 1c 02 	call	0x438	; 0x438 <MDIO_u8WriteBit>
			/*set Seconds-Tens 7-segment value*/
			H7SEG_u8DisplayNumber(MDIO_PORTA,Local_u8SecondsTensCount);
 1f4:	60 2f       	mov	r22, r16
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	0e 94 4c 00 	call	0x98	; 0x98 <H7SEG_u8DisplayNumber>
 1fc:	8f e9       	ldi	r24, 0x9F	; 159
 1fe:	9f e0       	ldi	r25, 0x0F	; 15
 200:	01 97       	sbiw	r24, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <main+0x14a>
 204:	00 c0       	rjmp	.+0      	; 0x206 <main+0x150>
 206:	00 00       	nop
			
			/*================================================================
			 *Display Minutes-Units 7-segment
			 *================================================================*/
			/*disable Seconds-Units 7-segment*/
			MDIO_u8WriteBit(MDIO_PORTB,MDIO_PB7,MDIO_LOW);
 208:	40 e0       	ldi	r20, 0x00	; 0
 20a:	67 e0       	ldi	r22, 0x07	; 7
 20c:	82 e0       	ldi	r24, 0x02	; 2
 20e:	0e 94 1c 02 	call	0x438	; 0x438 <MDIO_u8WriteBit>
			/*disable Seconds-Tens 7-segment*/
			MDIO_u8WriteBit(MDIO_PORTB,MDIO_PB6,MDIO_LOW);
 212:	40 e0       	ldi	r20, 0x00	; 0
 214:	66 e0       	ldi	r22, 0x06	; 6
 216:	82 e0       	ldi	r24, 0x02	; 2
 218:	0e 94 1c 02 	call	0x438	; 0x438 <MDIO_u8WriteBit>
			/*enable Minutes-Units 7-segment*/
			MDIO_u8WriteBit(MDIO_PORTB,MDIO_PB5,MDIO_HIGH);
 21c:	41 e0       	ldi	r20, 0x01	; 1
 21e:	65 e0       	ldi	r22, 0x05	; 5
 220:	82 e0       	ldi	r24, 0x02	; 2
 222:	0e 94 1c 02 	call	0x438	; 0x438 <MDIO_u8WriteBit>
			/*disable Minutes-Tens 7-segment*/
			MDIO_u8WriteBit(MDIO_PORTB,MDIO_PB4,MDIO_LOW);
 226:	40 e0       	ldi	r20, 0x00	; 0
 228:	64 e0       	ldi	r22, 0x04	; 4
 22a:	82 e0       	ldi	r24, 0x02	; 2
 22c:	0e 94 1c 02 	call	0x438	; 0x438 <MDIO_u8WriteBit>
			/*set Minutes-Units 7-segment value*/
			H7SEG_u8DisplayNumber(MDIO_PORTA,Local_u8MinutesUnitsCount);
 230:	61 2f       	mov	r22, r17
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	0e 94 4c 00 	call	0x98	; 0x98 <H7SEG_u8DisplayNumber>
 238:	8f e9       	ldi	r24, 0x9F	; 159
 23a:	9f e0       	ldi	r25, 0x0F	; 15
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	f1 f7       	brne	.-4      	; 0x23c <main+0x186>
 240:	00 c0       	rjmp	.+0      	; 0x242 <main+0x18c>
 242:	00 00       	nop
			
			/*================================================================
			 *Display Minutes-Tens 7-segment
			 *================================================================*/
			/*disable Seconds-Units 7-segment*/
			MDIO_u8WriteBit(MDIO_PORTB,MDIO_PB7,MDIO_LOW);
 244:	40 e0       	ldi	r20, 0x00	; 0
 246:	67 e0       	ldi	r22, 0x07	; 7
 248:	82 e0       	ldi	r24, 0x02	; 2
 24a:	0e 94 1c 02 	call	0x438	; 0x438 <MDIO_u8WriteBit>
			/*disable Seconds-Tens 7-segment*/
			MDIO_u8WriteBit(MDIO_PORTB,MDIO_PB6,MDIO_LOW);
 24e:	40 e0       	ldi	r20, 0x00	; 0
 250:	66 e0       	ldi	r22, 0x06	; 6
 252:	82 e0       	ldi	r24, 0x02	; 2
 254:	0e 94 1c 02 	call	0x438	; 0x438 <MDIO_u8WriteBit>
			/*disable Minutes-Units 7-segment*/
			MDIO_u8WriteBit(MDIO_PORTB,MDIO_PB5,MDIO_LOW);
 258:	40 e0       	ldi	r20, 0x00	; 0
 25a:	65 e0       	ldi	r22, 0x05	; 5
 25c:	82 e0       	ldi	r24, 0x02	; 2
 25e:	0e 94 1c 02 	call	0x438	; 0x438 <MDIO_u8WriteBit>
			/*enable Minutes-Tens 7-segment*/
			MDIO_u8WriteBit(MDIO_PORTB,MDIO_PB4,MDIO_HIGH);
 262:	41 e0       	ldi	r20, 0x01	; 1
 264:	64 e0       	ldi	r22, 0x04	; 4
 266:	82 e0       	ldi	r24, 0x02	; 2
 268:	0e 94 1c 02 	call	0x438	; 0x438 <MDIO_u8WriteBit>
			/*set Minutes-Tens 7-segment value*/
			H7SEG_u8DisplayNumber(MDIO_PORTA,Local_u8MinutesTensCount);
 26c:	6f 2d       	mov	r22, r15
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	0e 94 4c 00 	call	0x98	; 0x98 <H7SEG_u8DisplayNumber>
 274:	8f e9       	ldi	r24, 0x9F	; 159
 276:	9f e0       	ldi	r25, 0x0F	; 15
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <main+0x1c2>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <main+0x1c8>
 27e:	00 00       	nop
 280:	c1 50       	subi	r28, 0x01	; 1
	while (1) 
    {
		
		
		/*loop to display all 7 segments with a delay Dependant on number of iteration*/
		for (u8 i = 0 ; i < DELAY ; i++)
 282:	09 f0       	breq	.+2      	; 0x286 <main+0x1d0>
 284:	66 cf       	rjmp	.-308    	; 0x152 <main+0x9c>
			
		}/*end of for*/
		
		
		/*if current state is start*/
		if ( START == APP_u8StopStartButtonState )
 286:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 28a:	81 30       	cpi	r24, 0x01	; 1
 28c:	09 f0       	breq	.+2      	; 0x290 <main+0x1da>
 28e:	60 cf       	rjmp	.-320    	; 0x150 <main+0x9a>
			/*================================================================
			* Update stopwatch digits values 
			*================================================================*/
		
			/*increment Seconds' Units value*/
			Local_u8SecondsUnitsCount++;
 290:	df 5f       	subi	r29, 0xFF	; 255
		
			/*when Seconds' Units value reaches 10*/
			if (10 == Local_u8SecondsUnitsCount)
 292:	da 30       	cpi	r29, 0x0A	; 10
 294:	11 f4       	brne	.+4      	; 0x29a <main+0x1e4>
			{
				/*make Seconds' Units value equal 0*/
				Local_u8SecondsUnitsCount = 0;
				/*increment Seconds' Tens value*/
				Local_u8SecondsTensCount++;
 296:	0f 5f       	subi	r16, 0xFF	; 255
		
			/*when Seconds' Units value reaches 10*/
			if (10 == Local_u8SecondsUnitsCount)
			{
				/*make Seconds' Units value equal 0*/
				Local_u8SecondsUnitsCount = 0;
 298:	d0 e0       	ldi	r29, 0x00	; 0
				Local_u8SecondsTensCount++;
			
			}/*end of if*/
			
			/*when Seconds' Tens value reaches 6*/
			if ( 6 == Local_u8SecondsTensCount)
 29a:	06 30       	cpi	r16, 0x06	; 6
 29c:	19 f4       	brne	.+6      	; 0x2a4 <main+0x1ee>
				Local_u8SecondsUnitsCount = 0;
				/*make Seconds' Tens  value equal 0*/
				Local_u8SecondsTensCount = 0;
				/*Increment Minutes' Units value*/
				/*increment Seconds' Units value*/
				Local_u8MinutesUnitsCount++;
 29e:	1f 5f       	subi	r17, 0xFF	; 255
			if ( 6 == Local_u8SecondsTensCount)
			{
				/*make Seconds' Units  value equal 0*/
				Local_u8SecondsUnitsCount = 0;
				/*make Seconds' Tens  value equal 0*/
				Local_u8SecondsTensCount = 0;
 2a0:	00 e0       	ldi	r16, 0x00	; 0
			
			/*when Seconds' Tens value reaches 6*/
			if ( 6 == Local_u8SecondsTensCount)
			{
				/*make Seconds' Units  value equal 0*/
				Local_u8SecondsUnitsCount = 0;
 2a2:	d0 e0       	ldi	r29, 0x00	; 0
				/*increment Seconds' Units value*/
				Local_u8MinutesUnitsCount++;
			}/*end of if*/
		
			/*when Minutes' Units value reaches 10*/
			if (10 == Local_u8MinutesUnitsCount)
 2a4:	1a 30       	cpi	r17, 0x0A	; 10
 2a6:	11 f4       	brne	.+4      	; 0x2ac <main+0x1f6>
			{
				/*make Minutes' Units value equal 0*/
				Local_u8MinutesUnitsCount = 0;
				/*increment Minutes' Tens value*/
				Local_u8MinutesTensCount++;
 2a8:	f3 94       	inc	r15
		
			/*when Minutes' Units value reaches 10*/
			if (10 == Local_u8MinutesUnitsCount)
			{
				/*make Minutes' Units value equal 0*/
				Local_u8MinutesUnitsCount = 0;
 2aa:	10 e0       	ldi	r17, 0x00	; 0
				Local_u8MinutesTensCount++;
			
			}/*end of if*/
			
			/*when Minutes' Tens value reaches 6*/
			if ( 6 == Local_u8MinutesTensCount)
 2ac:	96 e0       	ldi	r25, 0x06	; 6
 2ae:	f9 12       	cpse	r15, r25
 2b0:	4f cf       	rjmp	.-354    	; 0x150 <main+0x9a>
			{
				/*make Minutes' Units  value equal 0*/
				Local_u8MinutesUnitsCount = 0;
				/*make Minutes' Tens  value equal 0*/
				Local_u8MinutesTensCount = 0;
 2b2:	f1 2c       	mov	r15, r1
			
			/*when Minutes' Tens value reaches 6*/
			if ( 6 == Local_u8MinutesTensCount)
			{
				/*make Minutes' Units  value equal 0*/
				Local_u8MinutesUnitsCount = 0;
 2b4:	10 e0       	ldi	r17, 0x00	; 0
 2b6:	4c cf       	rjmp	.-360    	; 0x150 <main+0x9a>

000002b8 <MDIO_u8SetDirectionReg>:
		case MDIO_PORTD : {DIO_PORTD = Local_u8PullUpResStatus; return 0;}  break;
		default         : return 1; /*error Undefined Port*/
			
	}/*end of register switch case*/

}/*end of MDIO_u8ConfigPullupReg()*/
 2b8:	61 30       	cpi	r22, 0x01	; 1
 2ba:	09 f4       	brne	.+2      	; 0x2be <MDIO_u8SetDirectionReg+0x6>
 2bc:	6f ef       	ldi	r22, 0xFF	; 255
 2be:	82 30       	cpi	r24, 0x02	; 2
 2c0:	61 f0       	breq	.+24     	; 0x2da <MDIO_u8SetDirectionReg+0x22>
 2c2:	18 f4       	brcc	.+6      	; 0x2ca <MDIO_u8SetDirectionReg+0x12>
 2c4:	81 30       	cpi	r24, 0x01	; 1
 2c6:	31 f0       	breq	.+12     	; 0x2d4 <MDIO_u8SetDirectionReg+0x1c>
 2c8:	11 c0       	rjmp	.+34     	; 0x2ec <MDIO_u8SetDirectionReg+0x34>
 2ca:	83 30       	cpi	r24, 0x03	; 3
 2cc:	49 f0       	breq	.+18     	; 0x2e0 <MDIO_u8SetDirectionReg+0x28>
 2ce:	84 30       	cpi	r24, 0x04	; 4
 2d0:	51 f0       	breq	.+20     	; 0x2e6 <MDIO_u8SetDirectionReg+0x2e>
 2d2:	0c c0       	rjmp	.+24     	; 0x2ec <MDIO_u8SetDirectionReg+0x34>
 2d4:	6a bb       	out	0x1a, r22	; 26
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	08 95       	ret
 2da:	67 bb       	out	0x17, r22	; 23
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	08 95       	ret
 2e0:	64 bb       	out	0x14, r22	; 20
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	08 95       	ret
 2e6:	61 bb       	out	0x11, r22	; 17
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	08 95       	ret
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	08 95       	ret

000002f0 <MDIO_u8SetDirectionBit>:
 2f0:	68 30       	cpi	r22, 0x08	; 8
 2f2:	08 f0       	brcs	.+2      	; 0x2f6 <MDIO_u8SetDirectionBit+0x6>
 2f4:	7f c0       	rjmp	.+254    	; 0x3f4 <MDIO_u8SetDirectionBit+0x104>
 2f6:	42 30       	cpi	r20, 0x02	; 2
 2f8:	08 f0       	brcs	.+2      	; 0x2fc <MDIO_u8SetDirectionBit+0xc>
 2fa:	7e c0       	rjmp	.+252    	; 0x3f8 <MDIO_u8SetDirectionBit+0x108>
 2fc:	82 30       	cpi	r24, 0x02	; 2
 2fe:	31 f1       	breq	.+76     	; 0x34c <MDIO_u8SetDirectionBit+0x5c>
 300:	18 f4       	brcc	.+6      	; 0x308 <MDIO_u8SetDirectionBit+0x18>
 302:	81 30       	cpi	r24, 0x01	; 1
 304:	39 f0       	breq	.+14     	; 0x314 <MDIO_u8SetDirectionBit+0x24>
 306:	7a c0       	rjmp	.+244    	; 0x3fc <MDIO_u8SetDirectionBit+0x10c>
 308:	83 30       	cpi	r24, 0x03	; 3
 30a:	e1 f1       	breq	.+120    	; 0x384 <MDIO_u8SetDirectionBit+0x94>
 30c:	84 30       	cpi	r24, 0x04	; 4
 30e:	09 f4       	brne	.+2      	; 0x312 <MDIO_u8SetDirectionBit+0x22>
 310:	55 c0       	rjmp	.+170    	; 0x3bc <MDIO_u8SetDirectionBit+0xcc>
 312:	74 c0       	rjmp	.+232    	; 0x3fc <MDIO_u8SetDirectionBit+0x10c>
 314:	41 11       	cpse	r20, r1
 316:	0d c0       	rjmp	.+26     	; 0x332 <MDIO_u8SetDirectionBit+0x42>
 318:	9a b3       	in	r25, 0x1a	; 26
 31a:	21 e0       	ldi	r18, 0x01	; 1
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	02 c0       	rjmp	.+4      	; 0x324 <MDIO_u8SetDirectionBit+0x34>
 320:	22 0f       	add	r18, r18
 322:	33 1f       	adc	r19, r19
 324:	6a 95       	dec	r22
 326:	e2 f7       	brpl	.-8      	; 0x320 <MDIO_u8SetDirectionBit+0x30>
 328:	82 2f       	mov	r24, r18
 32a:	80 95       	com	r24
 32c:	89 23       	and	r24, r25
 32e:	8a bb       	out	0x1a, r24	; 26
 330:	0a c0       	rjmp	.+20     	; 0x346 <MDIO_u8SetDirectionBit+0x56>
 332:	2a b3       	in	r18, 0x1a	; 26
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	02 c0       	rjmp	.+4      	; 0x33e <MDIO_u8SetDirectionBit+0x4e>
 33a:	88 0f       	add	r24, r24
 33c:	99 1f       	adc	r25, r25
 33e:	6a 95       	dec	r22
 340:	e2 f7       	brpl	.-8      	; 0x33a <MDIO_u8SetDirectionBit+0x4a>
 342:	82 2b       	or	r24, r18
 344:	8a bb       	out	0x1a, r24	; 26
 346:	8a bb       	out	0x1a, r24	; 26
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	08 95       	ret
 34c:	41 11       	cpse	r20, r1
 34e:	0d c0       	rjmp	.+26     	; 0x36a <MDIO_u8SetDirectionBit+0x7a>
 350:	97 b3       	in	r25, 0x17	; 23
 352:	21 e0       	ldi	r18, 0x01	; 1
 354:	30 e0       	ldi	r19, 0x00	; 0
 356:	02 c0       	rjmp	.+4      	; 0x35c <MDIO_u8SetDirectionBit+0x6c>
 358:	22 0f       	add	r18, r18
 35a:	33 1f       	adc	r19, r19
 35c:	6a 95       	dec	r22
 35e:	e2 f7       	brpl	.-8      	; 0x358 <MDIO_u8SetDirectionBit+0x68>
 360:	82 2f       	mov	r24, r18
 362:	80 95       	com	r24
 364:	89 23       	and	r24, r25
 366:	87 bb       	out	0x17, r24	; 23
 368:	0a c0       	rjmp	.+20     	; 0x37e <MDIO_u8SetDirectionBit+0x8e>
 36a:	27 b3       	in	r18, 0x17	; 23
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	02 c0       	rjmp	.+4      	; 0x376 <MDIO_u8SetDirectionBit+0x86>
 372:	88 0f       	add	r24, r24
 374:	99 1f       	adc	r25, r25
 376:	6a 95       	dec	r22
 378:	e2 f7       	brpl	.-8      	; 0x372 <MDIO_u8SetDirectionBit+0x82>
 37a:	82 2b       	or	r24, r18
 37c:	87 bb       	out	0x17, r24	; 23
 37e:	87 bb       	out	0x17, r24	; 23
 380:	80 e0       	ldi	r24, 0x00	; 0
 382:	08 95       	ret
 384:	41 11       	cpse	r20, r1
 386:	0d c0       	rjmp	.+26     	; 0x3a2 <MDIO_u8SetDirectionBit+0xb2>
 388:	94 b3       	in	r25, 0x14	; 20
 38a:	21 e0       	ldi	r18, 0x01	; 1
 38c:	30 e0       	ldi	r19, 0x00	; 0
 38e:	02 c0       	rjmp	.+4      	; 0x394 <MDIO_u8SetDirectionBit+0xa4>
 390:	22 0f       	add	r18, r18
 392:	33 1f       	adc	r19, r19
 394:	6a 95       	dec	r22
 396:	e2 f7       	brpl	.-8      	; 0x390 <MDIO_u8SetDirectionBit+0xa0>
 398:	82 2f       	mov	r24, r18
 39a:	80 95       	com	r24
 39c:	89 23       	and	r24, r25
 39e:	84 bb       	out	0x14, r24	; 20
 3a0:	0a c0       	rjmp	.+20     	; 0x3b6 <MDIO_u8SetDirectionBit+0xc6>
 3a2:	24 b3       	in	r18, 0x14	; 20
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <MDIO_u8SetDirectionBit+0xbe>
 3aa:	88 0f       	add	r24, r24
 3ac:	99 1f       	adc	r25, r25
 3ae:	6a 95       	dec	r22
 3b0:	e2 f7       	brpl	.-8      	; 0x3aa <MDIO_u8SetDirectionBit+0xba>
 3b2:	82 2b       	or	r24, r18
 3b4:	84 bb       	out	0x14, r24	; 20
 3b6:	84 bb       	out	0x14, r24	; 20
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	08 95       	ret
 3bc:	41 11       	cpse	r20, r1
 3be:	0d c0       	rjmp	.+26     	; 0x3da <MDIO_u8SetDirectionBit+0xea>
 3c0:	91 b3       	in	r25, 0x11	; 17
 3c2:	21 e0       	ldi	r18, 0x01	; 1
 3c4:	30 e0       	ldi	r19, 0x00	; 0
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <MDIO_u8SetDirectionBit+0xdc>
 3c8:	22 0f       	add	r18, r18
 3ca:	33 1f       	adc	r19, r19
 3cc:	6a 95       	dec	r22
 3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <MDIO_u8SetDirectionBit+0xd8>
 3d0:	82 2f       	mov	r24, r18
 3d2:	80 95       	com	r24
 3d4:	89 23       	and	r24, r25
 3d6:	81 bb       	out	0x11, r24	; 17
 3d8:	0a c0       	rjmp	.+20     	; 0x3ee <MDIO_u8SetDirectionBit+0xfe>
 3da:	21 b3       	in	r18, 0x11	; 17
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <MDIO_u8SetDirectionBit+0xf6>
 3e2:	88 0f       	add	r24, r24
 3e4:	99 1f       	adc	r25, r25
 3e6:	6a 95       	dec	r22
 3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <MDIO_u8SetDirectionBit+0xf2>
 3ea:	82 2b       	or	r24, r18
 3ec:	81 bb       	out	0x11, r24	; 17
 3ee:	81 bb       	out	0x11, r24	; 17
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	08 95       	ret
 3f4:	82 e0       	ldi	r24, 0x02	; 2
 3f6:	08 95       	ret
 3f8:	83 e0       	ldi	r24, 0x03	; 3
 3fa:	08 95       	ret
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	08 95       	ret

00000400 <MDIO_u8WriteReg>:
 400:	61 30       	cpi	r22, 0x01	; 1
 402:	09 f4       	brne	.+2      	; 0x406 <MDIO_u8WriteReg+0x6>
 404:	6f ef       	ldi	r22, 0xFF	; 255
 406:	82 30       	cpi	r24, 0x02	; 2
 408:	61 f0       	breq	.+24     	; 0x422 <MDIO_u8WriteReg+0x22>
 40a:	18 f4       	brcc	.+6      	; 0x412 <MDIO_u8WriteReg+0x12>
 40c:	81 30       	cpi	r24, 0x01	; 1
 40e:	31 f0       	breq	.+12     	; 0x41c <MDIO_u8WriteReg+0x1c>
 410:	11 c0       	rjmp	.+34     	; 0x434 <MDIO_u8WriteReg+0x34>
 412:	83 30       	cpi	r24, 0x03	; 3
 414:	49 f0       	breq	.+18     	; 0x428 <MDIO_u8WriteReg+0x28>
 416:	84 30       	cpi	r24, 0x04	; 4
 418:	51 f0       	breq	.+20     	; 0x42e <MDIO_u8WriteReg+0x2e>
 41a:	0c c0       	rjmp	.+24     	; 0x434 <MDIO_u8WriteReg+0x34>
 41c:	6b bb       	out	0x1b, r22	; 27
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	08 95       	ret
 422:	68 bb       	out	0x18, r22	; 24
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	08 95       	ret
 428:	65 bb       	out	0x15, r22	; 21
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	08 95       	ret
 42e:	62 bb       	out	0x12, r22	; 18
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	08 95       	ret
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	08 95       	ret

00000438 <MDIO_u8WriteBit>:
 438:	68 30       	cpi	r22, 0x08	; 8
 43a:	08 f0       	brcs	.+2      	; 0x43e <MDIO_u8WriteBit+0x6>
 43c:	7b c0       	rjmp	.+246    	; 0x534 <MDIO_u8WriteBit+0xfc>
 43e:	42 30       	cpi	r20, 0x02	; 2
 440:	08 f0       	brcs	.+2      	; 0x444 <MDIO_u8WriteBit+0xc>
 442:	7a c0       	rjmp	.+244    	; 0x538 <MDIO_u8WriteBit+0x100>
 444:	82 30       	cpi	r24, 0x02	; 2
 446:	29 f1       	breq	.+74     	; 0x492 <MDIO_u8WriteBit+0x5a>
 448:	18 f4       	brcc	.+6      	; 0x450 <MDIO_u8WriteBit+0x18>
 44a:	81 30       	cpi	r24, 0x01	; 1
 44c:	39 f0       	breq	.+14     	; 0x45c <MDIO_u8WriteBit+0x24>
 44e:	76 c0       	rjmp	.+236    	; 0x53c <MDIO_u8WriteBit+0x104>
 450:	83 30       	cpi	r24, 0x03	; 3
 452:	d1 f1       	breq	.+116    	; 0x4c8 <MDIO_u8WriteBit+0x90>
 454:	84 30       	cpi	r24, 0x04	; 4
 456:	09 f4       	brne	.+2      	; 0x45a <MDIO_u8WriteBit+0x22>
 458:	52 c0       	rjmp	.+164    	; 0x4fe <MDIO_u8WriteBit+0xc6>
 45a:	70 c0       	rjmp	.+224    	; 0x53c <MDIO_u8WriteBit+0x104>
 45c:	41 11       	cpse	r20, r1
 45e:	0d c0       	rjmp	.+26     	; 0x47a <MDIO_u8WriteBit+0x42>
 460:	2b b3       	in	r18, 0x1b	; 27
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	02 c0       	rjmp	.+4      	; 0x46c <MDIO_u8WriteBit+0x34>
 468:	88 0f       	add	r24, r24
 46a:	99 1f       	adc	r25, r25
 46c:	6a 95       	dec	r22
 46e:	e2 f7       	brpl	.-8      	; 0x468 <MDIO_u8WriteBit+0x30>
 470:	80 95       	com	r24
 472:	82 23       	and	r24, r18
 474:	8b bb       	out	0x1b, r24	; 27
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	08 95       	ret
 47a:	2b b3       	in	r18, 0x1b	; 27
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	02 c0       	rjmp	.+4      	; 0x486 <MDIO_u8WriteBit+0x4e>
 482:	88 0f       	add	r24, r24
 484:	99 1f       	adc	r25, r25
 486:	6a 95       	dec	r22
 488:	e2 f7       	brpl	.-8      	; 0x482 <MDIO_u8WriteBit+0x4a>
 48a:	82 2b       	or	r24, r18
 48c:	8b bb       	out	0x1b, r24	; 27
 48e:	80 e0       	ldi	r24, 0x00	; 0
 490:	08 95       	ret
 492:	41 11       	cpse	r20, r1
 494:	0d c0       	rjmp	.+26     	; 0x4b0 <MDIO_u8WriteBit+0x78>
 496:	28 b3       	in	r18, 0x18	; 24
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	02 c0       	rjmp	.+4      	; 0x4a2 <MDIO_u8WriteBit+0x6a>
 49e:	88 0f       	add	r24, r24
 4a0:	99 1f       	adc	r25, r25
 4a2:	6a 95       	dec	r22
 4a4:	e2 f7       	brpl	.-8      	; 0x49e <MDIO_u8WriteBit+0x66>
 4a6:	80 95       	com	r24
 4a8:	82 23       	and	r24, r18
 4aa:	88 bb       	out	0x18, r24	; 24
 4ac:	80 e0       	ldi	r24, 0x00	; 0
 4ae:	08 95       	ret
 4b0:	28 b3       	in	r18, 0x18	; 24
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	02 c0       	rjmp	.+4      	; 0x4bc <MDIO_u8WriteBit+0x84>
 4b8:	88 0f       	add	r24, r24
 4ba:	99 1f       	adc	r25, r25
 4bc:	6a 95       	dec	r22
 4be:	e2 f7       	brpl	.-8      	; 0x4b8 <MDIO_u8WriteBit+0x80>
 4c0:	82 2b       	or	r24, r18
 4c2:	88 bb       	out	0x18, r24	; 24
 4c4:	80 e0       	ldi	r24, 0x00	; 0
 4c6:	08 95       	ret
 4c8:	41 11       	cpse	r20, r1
 4ca:	0d c0       	rjmp	.+26     	; 0x4e6 <MDIO_u8WriteBit+0xae>
 4cc:	25 b3       	in	r18, 0x15	; 21
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <MDIO_u8WriteBit+0xa0>
 4d4:	88 0f       	add	r24, r24
 4d6:	99 1f       	adc	r25, r25
 4d8:	6a 95       	dec	r22
 4da:	e2 f7       	brpl	.-8      	; 0x4d4 <MDIO_u8WriteBit+0x9c>
 4dc:	80 95       	com	r24
 4de:	82 23       	and	r24, r18
 4e0:	85 bb       	out	0x15, r24	; 21
 4e2:	80 e0       	ldi	r24, 0x00	; 0
 4e4:	08 95       	ret
 4e6:	25 b3       	in	r18, 0x15	; 21
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <MDIO_u8WriteBit+0xba>
 4ee:	88 0f       	add	r24, r24
 4f0:	99 1f       	adc	r25, r25
 4f2:	6a 95       	dec	r22
 4f4:	e2 f7       	brpl	.-8      	; 0x4ee <MDIO_u8WriteBit+0xb6>
 4f6:	82 2b       	or	r24, r18
 4f8:	85 bb       	out	0x15, r24	; 21
 4fa:	80 e0       	ldi	r24, 0x00	; 0
 4fc:	08 95       	ret
 4fe:	41 11       	cpse	r20, r1
 500:	0d c0       	rjmp	.+26     	; 0x51c <MDIO_u8WriteBit+0xe4>
 502:	22 b3       	in	r18, 0x12	; 18
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	02 c0       	rjmp	.+4      	; 0x50e <MDIO_u8WriteBit+0xd6>
 50a:	88 0f       	add	r24, r24
 50c:	99 1f       	adc	r25, r25
 50e:	6a 95       	dec	r22
 510:	e2 f7       	brpl	.-8      	; 0x50a <MDIO_u8WriteBit+0xd2>
 512:	80 95       	com	r24
 514:	82 23       	and	r24, r18
 516:	82 bb       	out	0x12, r24	; 18
 518:	80 e0       	ldi	r24, 0x00	; 0
 51a:	08 95       	ret
 51c:	22 b3       	in	r18, 0x12	; 18
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	02 c0       	rjmp	.+4      	; 0x528 <MDIO_u8WriteBit+0xf0>
 524:	88 0f       	add	r24, r24
 526:	99 1f       	adc	r25, r25
 528:	6a 95       	dec	r22
 52a:	e2 f7       	brpl	.-8      	; 0x524 <MDIO_u8WriteBit+0xec>
 52c:	82 2b       	or	r24, r18
 52e:	82 bb       	out	0x12, r24	; 18
 530:	80 e0       	ldi	r24, 0x00	; 0
 532:	08 95       	ret
 534:	82 e0       	ldi	r24, 0x02	; 2
 536:	08 95       	ret
 538:	83 e0       	ldi	r24, 0x03	; 3
 53a:	08 95       	ret
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	08 95       	ret

00000540 <MDIO_u8ReadBit>:
 540:	68 30       	cpi	r22, 0x08	; 8
 542:	78 f5       	brcc	.+94     	; 0x5a2 <MDIO_u8ReadBit+0x62>
 544:	82 30       	cpi	r24, 0x02	; 2
 546:	91 f0       	breq	.+36     	; 0x56c <MDIO_u8ReadBit+0x2c>
 548:	18 f4       	brcc	.+6      	; 0x550 <MDIO_u8ReadBit+0x10>
 54a:	81 30       	cpi	r24, 0x01	; 1
 54c:	31 f0       	breq	.+12     	; 0x55a <MDIO_u8ReadBit+0x1a>
 54e:	2b c0       	rjmp	.+86     	; 0x5a6 <MDIO_u8ReadBit+0x66>
 550:	83 30       	cpi	r24, 0x03	; 3
 552:	a9 f0       	breq	.+42     	; 0x57e <MDIO_u8ReadBit+0x3e>
 554:	84 30       	cpi	r24, 0x04	; 4
 556:	e1 f0       	breq	.+56     	; 0x590 <MDIO_u8ReadBit+0x50>
 558:	26 c0       	rjmp	.+76     	; 0x5a6 <MDIO_u8ReadBit+0x66>
 55a:	89 b3       	in	r24, 0x19	; 25
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	02 c0       	rjmp	.+4      	; 0x564 <MDIO_u8ReadBit+0x24>
 560:	95 95       	asr	r25
 562:	87 95       	ror	r24
 564:	6a 95       	dec	r22
 566:	e2 f7       	brpl	.-8      	; 0x560 <MDIO_u8ReadBit+0x20>
 568:	81 70       	andi	r24, 0x01	; 1
 56a:	08 95       	ret
 56c:	86 b3       	in	r24, 0x16	; 22
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	02 c0       	rjmp	.+4      	; 0x576 <MDIO_u8ReadBit+0x36>
 572:	95 95       	asr	r25
 574:	87 95       	ror	r24
 576:	6a 95       	dec	r22
 578:	e2 f7       	brpl	.-8      	; 0x572 <MDIO_u8ReadBit+0x32>
 57a:	81 70       	andi	r24, 0x01	; 1
 57c:	08 95       	ret
 57e:	83 b3       	in	r24, 0x13	; 19
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	02 c0       	rjmp	.+4      	; 0x588 <MDIO_u8ReadBit+0x48>
 584:	95 95       	asr	r25
 586:	87 95       	ror	r24
 588:	6a 95       	dec	r22
 58a:	e2 f7       	brpl	.-8      	; 0x584 <MDIO_u8ReadBit+0x44>
 58c:	81 70       	andi	r24, 0x01	; 1
 58e:	08 95       	ret
 590:	80 b3       	in	r24, 0x10	; 16
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	02 c0       	rjmp	.+4      	; 0x59a <MDIO_u8ReadBit+0x5a>
 596:	95 95       	asr	r25
 598:	87 95       	ror	r24
 59a:	6a 95       	dec	r22
 59c:	e2 f7       	brpl	.-8      	; 0x596 <MDIO_u8ReadBit+0x56>
 59e:	81 70       	andi	r24, 0x01	; 1
 5a0:	08 95       	ret
 5a2:	83 e0       	ldi	r24, 0x03	; 3
 5a4:	08 95       	ret
 5a6:	82 e0       	ldi	r24, 0x02	; 2
 5a8:	08 95       	ret

000005aa <MDIO_u8ConfigPullupBit>:
 *               resistor status value out of range
 */
u8 MDIO_u8ConfigPullupBit(u8 Copy_u8Reg,u8 Copy_u8Bit,u8 Copy_u8PullUpResStatus)
{
	/*Pull up res status check condition*/
	if( (MDIO_EN_PULL_UP_RES == Copy_u8PullUpResStatus) || (MDIO_DIS_PULL_UP_RES == Copy_u8PullUpResStatus) )
 5aa:	42 30       	cpi	r20, 0x02	; 2
 5ac:	08 f0       	brcs	.+2      	; 0x5b0 <MDIO_u8ConfigPullupBit+0x6>
 5ae:	7b c0       	rjmp	.+246    	; 0x6a6 <MDIO_u8ConfigPullupBit+0xfc>
	{
		/*bit number check condition*/
		if( (Copy_u8Bit >= 0) && (Copy_u8Bit < 8) )
 5b0:	68 30       	cpi	r22, 0x08	; 8
 5b2:	08 f0       	brcs	.+2      	; 0x5b6 <MDIO_u8ConfigPullupBit+0xc>
 5b4:	7a c0       	rjmp	.+244    	; 0x6aa <MDIO_u8ConfigPullupBit+0x100>
		{
			/*register switch case*/
			switch (Copy_u8Reg)
 5b6:	82 30       	cpi	r24, 0x02	; 2
 5b8:	29 f1       	breq	.+74     	; 0x604 <MDIO_u8ConfigPullupBit+0x5a>
 5ba:	18 f4       	brcc	.+6      	; 0x5c2 <MDIO_u8ConfigPullupBit+0x18>
 5bc:	81 30       	cpi	r24, 0x01	; 1
 5be:	39 f0       	breq	.+14     	; 0x5ce <MDIO_u8ConfigPullupBit+0x24>
 5c0:	76 c0       	rjmp	.+236    	; 0x6ae <MDIO_u8ConfigPullupBit+0x104>
 5c2:	83 30       	cpi	r24, 0x03	; 3
 5c4:	d1 f1       	breq	.+116    	; 0x63a <MDIO_u8ConfigPullupBit+0x90>
 5c6:	84 30       	cpi	r24, 0x04	; 4
 5c8:	09 f4       	brne	.+2      	; 0x5cc <MDIO_u8ConfigPullupBit+0x22>
 5ca:	52 c0       	rjmp	.+164    	; 0x670 <MDIO_u8ConfigPullupBit+0xc6>
 5cc:	70 c0       	rjmp	.+224    	; 0x6ae <MDIO_u8ConfigPullupBit+0x104>
			{
				/*Configure bit value in PORTx reg with choosen pull up res status(Copy_u8PullUpResStatus)*/
				case MDIO_PORTA : {L_UTILS_SET_BIT_VALUE(DIO_PORTA,Copy_u8Bit,Copy_u8PullUpResStatus); return 0;} break;
 5ce:	41 11       	cpse	r20, r1
 5d0:	0d c0       	rjmp	.+26     	; 0x5ec <MDIO_u8ConfigPullupBit+0x42>
 5d2:	2b b3       	in	r18, 0x1b	; 27
 5d4:	81 e0       	ldi	r24, 0x01	; 1
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	02 c0       	rjmp	.+4      	; 0x5de <MDIO_u8ConfigPullupBit+0x34>
 5da:	88 0f       	add	r24, r24
 5dc:	99 1f       	adc	r25, r25
 5de:	6a 95       	dec	r22
 5e0:	e2 f7       	brpl	.-8      	; 0x5da <MDIO_u8ConfigPullupBit+0x30>
 5e2:	80 95       	com	r24
 5e4:	82 23       	and	r24, r18
 5e6:	8b bb       	out	0x1b, r24	; 27
 5e8:	80 e0       	ldi	r24, 0x00	; 0
 5ea:	08 95       	ret
 5ec:	2b b3       	in	r18, 0x1b	; 27
 5ee:	81 e0       	ldi	r24, 0x01	; 1
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <MDIO_u8ConfigPullupBit+0x4e>
 5f4:	88 0f       	add	r24, r24
 5f6:	99 1f       	adc	r25, r25
 5f8:	6a 95       	dec	r22
 5fa:	e2 f7       	brpl	.-8      	; 0x5f4 <MDIO_u8ConfigPullupBit+0x4a>
 5fc:	82 2b       	or	r24, r18
 5fe:	8b bb       	out	0x1b, r24	; 27
 600:	80 e0       	ldi	r24, 0x00	; 0
 602:	08 95       	ret
				case MDIO_PORTB : {L_UTILS_SET_BIT_VALUE(DIO_PORTB,Copy_u8Bit,Copy_u8PullUpResStatus); return 0;} break;
 604:	41 11       	cpse	r20, r1
 606:	0d c0       	rjmp	.+26     	; 0x622 <MDIO_u8ConfigPullupBit+0x78>
 608:	28 b3       	in	r18, 0x18	; 24
 60a:	81 e0       	ldi	r24, 0x01	; 1
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	02 c0       	rjmp	.+4      	; 0x614 <MDIO_u8ConfigPullupBit+0x6a>
 610:	88 0f       	add	r24, r24
 612:	99 1f       	adc	r25, r25
 614:	6a 95       	dec	r22
 616:	e2 f7       	brpl	.-8      	; 0x610 <MDIO_u8ConfigPullupBit+0x66>
 618:	80 95       	com	r24
 61a:	82 23       	and	r24, r18
 61c:	88 bb       	out	0x18, r24	; 24
 61e:	80 e0       	ldi	r24, 0x00	; 0
 620:	08 95       	ret
 622:	28 b3       	in	r18, 0x18	; 24
 624:	81 e0       	ldi	r24, 0x01	; 1
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	02 c0       	rjmp	.+4      	; 0x62e <MDIO_u8ConfigPullupBit+0x84>
 62a:	88 0f       	add	r24, r24
 62c:	99 1f       	adc	r25, r25
 62e:	6a 95       	dec	r22
 630:	e2 f7       	brpl	.-8      	; 0x62a <MDIO_u8ConfigPullupBit+0x80>
 632:	82 2b       	or	r24, r18
 634:	88 bb       	out	0x18, r24	; 24
 636:	80 e0       	ldi	r24, 0x00	; 0
 638:	08 95       	ret
				case MDIO_PORTC : {L_UTILS_SET_BIT_VALUE(DIO_PORTC,Copy_u8Bit,Copy_u8PullUpResStatus); return 0;} break;
 63a:	41 11       	cpse	r20, r1
 63c:	0d c0       	rjmp	.+26     	; 0x658 <MDIO_u8ConfigPullupBit+0xae>
 63e:	25 b3       	in	r18, 0x15	; 21
 640:	81 e0       	ldi	r24, 0x01	; 1
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	02 c0       	rjmp	.+4      	; 0x64a <MDIO_u8ConfigPullupBit+0xa0>
 646:	88 0f       	add	r24, r24
 648:	99 1f       	adc	r25, r25
 64a:	6a 95       	dec	r22
 64c:	e2 f7       	brpl	.-8      	; 0x646 <MDIO_u8ConfigPullupBit+0x9c>
 64e:	80 95       	com	r24
 650:	82 23       	and	r24, r18
 652:	85 bb       	out	0x15, r24	; 21
 654:	80 e0       	ldi	r24, 0x00	; 0
 656:	08 95       	ret
 658:	25 b3       	in	r18, 0x15	; 21
 65a:	81 e0       	ldi	r24, 0x01	; 1
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	02 c0       	rjmp	.+4      	; 0x664 <MDIO_u8ConfigPullupBit+0xba>
 660:	88 0f       	add	r24, r24
 662:	99 1f       	adc	r25, r25
 664:	6a 95       	dec	r22
 666:	e2 f7       	brpl	.-8      	; 0x660 <MDIO_u8ConfigPullupBit+0xb6>
 668:	82 2b       	or	r24, r18
 66a:	85 bb       	out	0x15, r24	; 21
 66c:	80 e0       	ldi	r24, 0x00	; 0
 66e:	08 95       	ret
				case MDIO_PORTD : {L_UTILS_SET_BIT_VALUE(DIO_PORTD,Copy_u8Bit,Copy_u8PullUpResStatus); return 0;} break;
 670:	41 11       	cpse	r20, r1
 672:	0d c0       	rjmp	.+26     	; 0x68e <MDIO_u8ConfigPullupBit+0xe4>
 674:	22 b3       	in	r18, 0x12	; 18
 676:	81 e0       	ldi	r24, 0x01	; 1
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	02 c0       	rjmp	.+4      	; 0x680 <MDIO_u8ConfigPullupBit+0xd6>
 67c:	88 0f       	add	r24, r24
 67e:	99 1f       	adc	r25, r25
 680:	6a 95       	dec	r22
 682:	e2 f7       	brpl	.-8      	; 0x67c <MDIO_u8ConfigPullupBit+0xd2>
 684:	80 95       	com	r24
 686:	82 23       	and	r24, r18
 688:	82 bb       	out	0x12, r24	; 18
 68a:	80 e0       	ldi	r24, 0x00	; 0
 68c:	08 95       	ret
 68e:	22 b3       	in	r18, 0x12	; 18
 690:	81 e0       	ldi	r24, 0x01	; 1
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	02 c0       	rjmp	.+4      	; 0x69a <MDIO_u8ConfigPullupBit+0xf0>
 696:	88 0f       	add	r24, r24
 698:	99 1f       	adc	r25, r25
 69a:	6a 95       	dec	r22
 69c:	e2 f7       	brpl	.-8      	; 0x696 <MDIO_u8ConfigPullupBit+0xec>
 69e:	82 2b       	or	r24, r18
 6a0:	82 bb       	out	0x12, r24	; 18
 6a2:	80 e0       	ldi	r24, 0x00	; 0
 6a4:	08 95       	ret

	}
	else
	{
		/*Report Pull up res status value out of range error*/
		return 3;
 6a6:	83 e0       	ldi	r24, 0x03	; 3
 6a8:	08 95       	ret
			}/*end of Register switch case*/
		}
		else
		{
			/*Report Bit number out of range error*/
			return 2; 
 6aa:	82 e0       	ldi	r24, 0x02	; 2
 6ac:	08 95       	ret
				/*Configure bit value in PORTx reg with choosen pull up res status(Copy_u8PullUpResStatus)*/
				case MDIO_PORTA : {L_UTILS_SET_BIT_VALUE(DIO_PORTA,Copy_u8Bit,Copy_u8PullUpResStatus); return 0;} break;
				case MDIO_PORTB : {L_UTILS_SET_BIT_VALUE(DIO_PORTB,Copy_u8Bit,Copy_u8PullUpResStatus); return 0;} break;
				case MDIO_PORTC : {L_UTILS_SET_BIT_VALUE(DIO_PORTC,Copy_u8Bit,Copy_u8PullUpResStatus); return 0;} break;
				case MDIO_PORTD : {L_UTILS_SET_BIT_VALUE(DIO_PORTD,Copy_u8Bit,Copy_u8PullUpResStatus); return 0;} break;
				default         : return 1;  /*error Undefined Port*/
 6ae:	81 e0       	ldi	r24, 0x01	; 1
		/*Report Pull up res status value out of range error*/
		return 3;

	}/*end of Pull up res status check condition*/
	
 6b0:	08 95       	ret

000006b2 <_exit>:
 6b2:	f8 94       	cli

000006b4 <__stop_program>:
 6b4:	ff cf       	rjmp	.-2      	; 0x6b4 <__stop_program>
